[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "hushell"
version = "0.1.0"
description = "HuShell: next ai assistant - 互协AI智能助手系统"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "HuShell Team", email = "team@hushell.ai"},
]
keywords = ["ai", "assistant", "shell", "hushell", "互协", "plugin", "llm"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[project.urls]
Homepage = "https://github.com/JadeSnow7/assistant"
Repository = "https://github.com/JadeSnow7/assistant"
Documentation = "https://github.com/JadeSnow7/assistant/wiki"
Issues = "https://github.com/JadeSnow7/assistant/issues"

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=core",
    "--cov=services", 
    "--cov=interfaces",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=75",
    "--maxfail=5",
    "--durations=10",
]
testpaths = ["tests"]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
    "*Test",
    "*TestCase",
]
python_functions = [
    "test_*",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "e2e: End-to-end tests",
    "performance: Performance tests",
    "security: Security tests",
    "slow: Slow running tests",
    "network: Tests that require network access",
    "gpu: Tests that require GPU",
    "cli: CLI interface tests",
    "api: API tests",
    "shell: Modern shell tests",
    "plugin: Plugin system tests",
    "inference: Model inference tests",
    "memory: Memory management tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Coverage configuration
[tool.coverage.run]
source = ["core", "services", "interfaces", "python"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/conftest.py",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Black code formatting
[tool.black]
line-length = 120
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
split_on_trailing_comma = true
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
known_first_party = ["core", "services", "interfaces", "python"]

# MyPy type checking
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "grpc.*",
    "transformers.*",
    "torch.*",
    "chromadb.*",
    "sentence_transformers.*",
    "textual.*",
    "rich.*",
    "psutil.*",
    "redis.*",
    "google.generativeai.*",
    "anthropic.*",
    "testcontainers.*",
    "locust.*",
]
ignore_missing_imports = true

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "test", "docs"]
skips = ["B101", "B601"]

# Pylint configuration
[tool.pylint.messages_control]
disable = [
    "missing-docstring",
    "too-many-arguments", 
    "too-many-locals",
    "too-few-public-methods",
    "import-error",
    "no-name-in-module",
]

[tool.pylint.format]
max-line-length = 120

# Flake8 configuration (in setup.cfg as flake8 doesn't support pyproject.toml yet)