# AI Assistant 开发环境Dockerfile
# 包含开发工具和调试功能

FROM ubuntu:22.04

# 设置环境变量
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHON_VERSION=3.11
ENV PYTHONPATH="/app:/app/python"
ENV PATH="/app/install/bin:$PATH"

# 接受构建参数
ARG USER_ID=1000
ARG GROUP_ID=1000

# 安装系统依赖和开发工具
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    pkg-config \
    git \
    vim \
    curl \
    wget \
    htop \
    tree \
    jq \
    netcat \
    lsof \
    python3 \
    python3-pip \
    python3-venv \
    python3-dev \
    libgrpc++-dev \
    libprotobuf-dev \
    protobuf-compiler-grpc \
    # 调试工具
    gdb \
    valgrind \
    strace \
    # 网络工具
    net-tools \
    iproute2 \
    dnsutils \
    && rm -rf /var/lib/apt/lists/*

# 创建开发用户
RUN groupadd -g ${GROUP_ID} developer && \
    useradd -u ${USER_ID} -g ${GROUP_ID} -m -s /bin/bash developer && \
    echo "developer ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# 安装Node.js (用于Web UI开发)
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
    apt-get install -y nodejs

# 设置工作目录
WORKDIR /app

# 复制依赖文件
COPY requirements.txt .
COPY requirements-dev.txt .

# 安装Python开发依赖
RUN python3 -m pip install --upgrade pip && \
    pip3 install --no-cache-dir -r requirements.txt && \
    pip3 install --no-cache-dir -r requirements-dev.txt

# 安装调试工具
RUN pip3 install --no-cache-dir \
    debugpy \
    ipdb \
    pytest-xdist \
    pytest-cov \
    pytest-mock \
    pytest-benchmark \
    locust

# 复制应用代码
COPY --chown=developer:developer . .

# 构建C++组件 (开发模式)
RUN mkdir -p build && cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=ON && \
    cmake --build . --config Debug && \
    cmake --install . --prefix /app/install

# 创建必要的目录
RUN mkdir -p logs data run tmp test_reports && \
    chown -R developer:developer /app

# 切换到开发用户
USER developer

# 设置Git配置
RUN git config --global user.name "Developer" && \
    git config --global user.email "dev@example.com" && \
    git config --global init.defaultBranch main

# 创建开发环境配置
RUN echo 'export PS1="\[\033[36m\]ai-assistant-dev\[\033[0m\]:\[\033[32m\]\w\[\033[0m\]\$ "' >> ~/.bashrc && \
    echo 'alias ll="ls -la"' >> ~/.bashrc && \
    echo 'alias pytest="python -m pytest"' >> ~/.bashrc && \
    echo 'alias serve="python python/main.py"' >> ~/.bashrc && \
    echo 'alias test="python tests/cli/run_cli_tests.py"' >> ~/.bashrc

# 暴露端口
EXPOSE 8000 50051 5678

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# 启动脚本
COPY --chown=developer:developer docker-entrypoint-dev.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint-dev.sh

ENTRYPOINT ["docker-entrypoint-dev.sh"]
CMD ["server"]