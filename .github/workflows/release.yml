name: Release Management

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.2.3)'
        required: true
      pre_release:
        description: 'Is this a pre-release?'
        required: true
        default: false
        type: boolean
      draft:
        description: 'Create as draft?'
        required: true
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # 验证发布条件
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "push" ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=${{ github.event.inputs.version }}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"

    - name: Validate version format
      run: |
        VERSION=${{ steps.version.outputs.version }}
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "Invalid version format: $VERSION"
          exit 1
        fi

    - name: Check if tag exists
      if: github.event_name == 'workflow_dispatch'
      run: |
        VERSION=${{ steps.version.outputs.version }}
        if git rev-parse "v$VERSION" >/dev/null 2>&1; then
          echo "Tag v$VERSION already exists"
          exit 1
        fi

    - name: Extract changelog
      id: changelog
      run: |
        VERSION=${{ steps.version.outputs.version }}
        # 从CHANGELOG.md中提取当前版本的变更日志
        if [[ -f CHANGELOG.md ]]; then
          # 提取当前版本的变更内容
          CHANGELOG=$(awk "/^## \[?$VERSION\]?/ { flag=1; next } /^## / { flag=0 } flag" CHANGELOG.md)
          if [[ -z "$CHANGELOG" ]]; then
            CHANGELOG="No changelog available for version $VERSION"
          fi
        else
          CHANGELOG="CHANGELOG.md not found"
        fi
        
        # 保存到文件以避免特殊字符问题
        echo "$CHANGELOG" > changelog.txt
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat changelog.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Upload changelog
      uses: actions/upload-artifact@v3
      with:
        name: changelog
        path: changelog.txt

  # 构建发布制品
  build-artifacts:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    needs: validate-release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: linux-x64
            binary_name: ai-assistant
          - os: windows-latest
            artifact_name: windows-x64
            binary_name: ai-assistant.exe
          - os: macos-latest
            artifact_name: macos-x64
            binary_name: ai-assistant
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.14
      with:
        cmake-version: '3.26'

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config
        sudo apt-get install -y libgrpc++-dev libprotobuf-dev protobuf-compiler-grpc

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install grpc protobuf

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build C++ components
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=OFF
        cmake --build . --config Release

    - name: Create Python distribution
      run: |
        python setup.py sdist bdist_wheel

    - name: Build standalone executable
      run: |
        pyinstaller --onefile --name ${{ matrix.binary_name }} \
          --add-data "ui:ui" \
          --add-data "python:python" \
          --hidden-import=rich \
          --hidden-import=textual \
          start_cli.py

    - name: Create release package
      run: |
        VERSION=${{ needs.validate-release.outputs.version }}
        PACKAGE_NAME="ai-assistant-v$VERSION-${{ matrix.artifact_name }}"
        
        mkdir -p release/$PACKAGE_NAME
        
        # 复制二进制文件
        if [[ -f dist/${{ matrix.binary_name }} ]]; then
          cp dist/${{ matrix.binary_name }} release/$PACKAGE_NAME/
        fi
        
        # 复制C++构建产物
        if [[ -d build/install ]]; then
          cp -r build/install/* release/$PACKAGE_NAME/
        fi
        
        # 复制文档和许可证
        cp README.md LICENSE CHANGELOG.md release/$PACKAGE_NAME/
        
        # 复制配置文件示例
        cp .env.example release/$PACKAGE_NAME/
        
        # 创建压缩包
        cd release
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          7z a "$PACKAGE_NAME.zip" "$PACKAGE_NAME"
        else
          tar -czf "$PACKAGE_NAME.tar.gz" "$PACKAGE_NAME"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-${{ matrix.artifact_name }}
        path: |
          release/*.tar.gz
          release/*.zip
          dist/*.whl

  # 构建Docker镜像
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Login to Docker Hub
      if: secrets.DOCKERHUB_TOKEN
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository }}
          ${{ secrets.DOCKERHUB_USERNAME }}/ai-assistant
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ needs.validate-release.outputs.version }}

  # 运行发布前测试
  pre-release-tests:
    name: Pre-Release Tests
    runs-on: ubuntu-latest
    needs: [validate-release, build-artifacts]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-linux-x64

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test release artifacts
      run: |
        # 测试构建的制品
        VERSION=${{ needs.validate-release.outputs.version }}
        PACKAGE_NAME="ai-assistant-v$VERSION-linux-x64"
        
        # 解压并测试
        tar -xzf "$PACKAGE_NAME.tar.gz"
        cd "$PACKAGE_NAME"
        
        # 运行基本功能测试
        if [[ -f ai-assistant ]]; then
          chmod +x ai-assistant
          ./ai-assistant --version || echo "Binary test completed"
        fi

    - name: Run smoke tests
      run: |
        python tests/cli/run_cli_tests.py --no-health-check --suites compatibility

  # 创建GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-artifacts, build-docker, pre-release-tests]
    if: always() && needs.validate-release.result == 'success' && needs.build-artifacts.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create release tag
      if: github.event_name == 'workflow_dispatch'
      run: |
        VERSION=${{ needs.validate-release.outputs.version }}
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "v$VERSION" -m "Release version $VERSION"
        git push origin "v$VERSION"

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.validate-release.outputs.version }}
        release_name: AI Assistant v${{ needs.validate-release.outputs.version }}
        body: |
          # AI Assistant v${{ needs.validate-release.outputs.version }}
          
          ## 🎉 新版本发布
          
          ${{ needs.validate-release.outputs.changelog }}
          
          ## 📦 下载
          
          - **Linux**: ai-assistant-v${{ needs.validate-release.outputs.version }}-linux-x64.tar.gz
          - **Windows**: ai-assistant-v${{ needs.validate-release.outputs.version }}-windows-x64.zip
          - **macOS**: ai-assistant-v${{ needs.validate-release.outputs.version }}-macos-x64.tar.gz
          
          ## 🐳 Docker镜像
          
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ needs.validate-release.outputs.version }}
          ```
          
          ## 📚 文档
          
          请查看 [README.md](README.md) 获取安装和使用说明。
          
          ## 🔄 更新说明
          
          详细的更新内容请查看 [CHANGELOG.md](CHANGELOG.md)。
        draft: ${{ github.event.inputs.draft == 'true' }}
        prerelease: ${{ github.event.inputs.pre_release == 'true' }}

    - name: Upload Release Assets
      run: |
        UPLOAD_URL="${{ steps.create_release.outputs.upload_url }}"
        
        # 上传各平台的发布包
        for artifact_dir in release-*; do
          if [[ -d "$artifact_dir" ]]; then
            for file in "$artifact_dir"/*.{tar.gz,zip}; do
              if [[ -f "$file" ]]; then
                filename=$(basename "$file")
                echo "Uploading $filename..."
                curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                     -H "Content-Type: application/octet-stream" \
                     --data-binary @"$file" \
                     "${UPLOAD_URL%\{*}?name=$filename"
              fi
            done
          fi
        done

  # 发布通知
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always() && needs.create-release.result == 'success'
    
    steps:
    - name: Notify success
      run: |
        echo "🎉 Release v${{ needs.validate-release.outputs.version }} created successfully!"
        # 这里可以添加通知逻辑（Slack、Discord、Email等）
        
    - name: Update documentation
      run: |
        echo "Updating documentation for new release..."
        # 这里可以添加文档更新逻辑