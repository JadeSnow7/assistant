name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - unit
        - integration
        - e2e

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  CACHE_VERSION: v1

jobs:
  # 质量门禁
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史用于分析

    - name: Generate cache key
      id: cache-key
      run: |
        echo "key=${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements*.txt', 'pyproject.toml') }}" >> $GITHUB_OUTPUT

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Cache virtual environment
      uses: actions/cache@v3
      with:
        path: .venv
        key: ${{ steps.cache-key.outputs.key }}
        restore-keys: |
          ${{ runner.os }}-py${{ env.PYTHON_VERSION }}-

    - name: Install dependencies
      run: |
        make setup-dev

    - name: Code formatting check
      run: |
        make lint-format

    - name: Type checking
      run: |
        make lint-type
      continue-on-error: true  # 类型检查不阻断流程

    - name: Security scan
      run: |
        make lint-security
      continue-on-error: true  # 安全扫描不阻断流程

  # 测试矩阵
  test-matrix:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    needs: quality-gate
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']
        test-type: [unit, integration]
        exclude:
          # 减少矩阵大小以节约资源
          - os: macos-latest
            python-version: '3.9'
          - os: macos-latest
            test-type: integration

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Cache virtual environment
      uses: actions/cache@v3
      with:
        path: .venv
        key: ${{ needs.quality-gate.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-py${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        make setup-dev

    - name: Run unit tests
      if: matrix.test-type == 'unit'
      run: |
        make test-unit

    - name: Run integration tests
      if: matrix.test-type == 'integration'
      run: |
        make test-integration
      continue-on-error: true  # 集成测试允许失败

    - name: Upload coverage
      if: matrix.test-type == 'unit' && matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # 构建测试
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: quality-gate
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Cache virtual environment
      uses: actions/cache@v3
      with:
        path: .venv
        key: ${{ needs.quality-gate.outputs.cache-key }}

    - name: Install dependencies
      run: |
        make setup-dev

    - name: Build package
      run: |
        make build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-${{ github.sha }}
        path: dist/
        retention-days: 7

  # 性能测试
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [quality-gate, test-matrix]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Cache virtual environment
      uses: actions/cache@v3
      with:
        path: .venv
        key: ${{ needs.quality-gate.outputs.cache-key }}

    - name: Install dependencies
      run: |
        make setup-dev

    - name: Run performance tests
      run: |
        make test-performance
      continue-on-error: true

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results-${{ github.sha }}
        path: |
          .benchmarks/
          benchmark_results*
        if-no-files-found: ignore

  # 容器构建
  container-build:
    name: Container Build
    runs-on: ubuntu-latest
    needs: [quality-gate, test-matrix]
    if: github.event_name == 'push'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 部署到暂存环境
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [container-build, performance-test]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.nex-ai.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "部署到暂存环境..."
        # 实际部署命令
        # kubectl apply -f deployment/k8s/staging/

    - name: Run smoke tests
      run: |
        echo "运行冒烟测试..."
        # 实际冒烟测试命令

  # 部署到生产环境
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [container-build, performance-test]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://nex-ai.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "部署到生产环境..."
        # 实际部署命令
        # kubectl apply -f deployment/k8s/production/

    - name: Run production smoke tests
      run: |
        echo "运行生产环境冒烟测试..."
        # 实际冒烟测试命令

  # 通知
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    steps:
    - name: Notify success
      if: needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success'
      run: |
        echo "✅ 部署成功！"
        # 发送成功通知

    - name: Notify failure
      if: needs.deploy-production.result == 'failure' || needs.deploy-staging.result == 'failure'
      run: |
        echo "❌ 部署失败！"
        # 发送失败通知