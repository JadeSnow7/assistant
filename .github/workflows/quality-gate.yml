name: Quality Gate

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  CACHE_VERSION: v1

jobs:
  # 快速代码质量检查
  quick-checks:
    name: Quick Quality Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy bandit safety

    - name: Check code formatting
      run: |
        black --check --diff .
        isort --check-only --diff .

    - name: Lint code
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

    - name: Type checking
      run: |
        mypy core/ services/ interfaces/ python/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true

    - name: Security check
      run: |
        bandit -r core/ services/ interfaces/ python/ -ll
        safety check
      continue-on-error: true

  # 依赖检查
  dependency-check:
    name: Dependency Security
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install pip-audit
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit

    - name: Check for vulnerabilities
      run: |
        pip-audit --format=json --output=pip-audit-report.json
      continue-on-error: true

    - name: Upload security report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          pip-audit-report.json
        if-no-files-found: ignore

  # 快速测试
  quick-test:
    name: Quick Test Suite
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock

    - name: Run fast tests
      run: |
        python -m pytest tests/test_basic.py -v
        python -m pytest tests/unit/ -v -m "not slow and not network" --maxfail=10 -x
      continue-on-error: true

  # 构建测试
  build-check:
    name: Build Verification
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build wheel

    - name: Test package build
      run: |
        python -m build --wheel --outdir dist/

    - name: Verify package
      run: |
        pip install dist/*.whl
        python -c "import python; print('Package imports successfully')"

  # 文档检查
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check README
      run: |
        test -f README.md || (echo "Missing README.md" && exit 1)
        test -s README.md || (echo "Empty README.md" && exit 1)

    - name: Check essential docs
      run: |
        test -f CHANGELOG.md || echo "Warning: Missing CHANGELOG.md"
        test -f CONTRIBUTING.md || echo "Warning: Missing CONTRIBUTING.md"
        test -f pyproject.toml || (echo "Missing pyproject.toml" && exit 1)

    - name: Validate pyproject.toml
      run: |
        python -c "import tomllib; f=open('pyproject.toml','rb'); tomllib.load(f); f.close(); print('pyproject.toml is valid')"

  # 变更影响分析
  change-analysis:
    name: Change Impact Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get changed files
      id: changed-files
      uses: dorny/paths-filter@v2
      with:
        filters: |
          core:
            - 'core/**'
          services:
            - 'services/**'
          interfaces:
            - 'interfaces/**'
          python:
            - 'python/**'
          tests:
            - 'tests/**'
          docs:
            - '*.md'
            - 'docs/**'
          config:
            - '*.toml'
            - '*.cfg'
            - '*.ini'
            - 'requirements*.txt'
          workflows:
            - '.github/**'

    - name: Analyze impact
      run: |
        echo "### Change Impact Analysis" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.changed-files.outputs.core }}" == "true" ]; then
          echo "🔴 **Core changes detected** - Full test suite recommended" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ steps.changed-files.outputs.services }}" == "true" ]; then
          echo "🟡 **Service changes detected** - Integration tests recommended" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ steps.changed-files.outputs.interfaces }}" == "true" ]; then
          echo "🟡 **Interface changes detected** - API tests recommended" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ steps.changed-files.outputs.tests }}" == "true" ]; then
          echo "🟢 **Test changes detected** - Verify test coverage" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ steps.changed-files.outputs.config }}" == "true" ]; then
          echo "🟠 **Configuration changes detected** - Deploy with caution" >> $GITHUB_STEP_SUMMARY
        fi

  # 质量门禁结果
  quality-gate-result:
    name: Quality Gate Result
    runs-on: ubuntu-latest
    needs: [quick-checks, dependency-check, quick-test, build-check, docs-check]
    if: always()
    steps:
    - name: Check results
      run: |
        echo "### Quality Gate Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check each job result
        QUICK_CHECKS="${{ needs.quick-checks.result }}"
        DEPENDENCY_CHECK="${{ needs.dependency-check.result }}"
        QUICK_TEST="${{ needs.quick-test.result }}"
        BUILD_CHECK="${{ needs.build-check.result }}"
        DOCS_CHECK="${{ needs.docs-check.result }}"
        
        PASSED=0
        TOTAL=5
        
        # Count passed checks
        [ "$QUICK_CHECKS" == "success" ] && ((PASSED++)) && echo "✅ Code Quality Checks" >> $GITHUB_STEP_SUMMARY || echo "❌ Code Quality Checks" >> $GITHUB_STEP_SUMMARY
        [ "$DEPENDENCY_CHECK" == "success" ] && ((PASSED++)) && echo "✅ Dependency Security" >> $GITHUB_STEP_SUMMARY || echo "⚠️ Dependency Security (warnings allowed)" >> $GITHUB_STEP_SUMMARY
        [ "$QUICK_TEST" == "success" ] && ((PASSED++)) && echo "✅ Quick Tests" >> $GITHUB_STEP_SUMMARY || echo "⚠️ Quick Tests (some failures allowed)" >> $GITHUB_STEP_SUMMARY
        [ "$BUILD_CHECK" == "success" ] && ((PASSED++)) && echo "✅ Build Verification" >> $GITHUB_STEP_SUMMARY || echo "❌ Build Verification" >> $GITHUB_STEP_SUMMARY
        [ "$DOCS_CHECK" == "success" ] && ((PASSED++)) && echo "✅ Documentation Check" >> $GITHUB_STEP_SUMMARY || echo "❌ Documentation Check" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Score: $PASSED/$TOTAL checks passed**" >> $GITHUB_STEP_SUMMARY
        
        # Determine if quality gate passes
        if [ $PASSED -ge 3 ]; then
          echo "🎉 **Quality Gate: PASSED**" >> $GITHUB_STEP_SUMMARY
          echo "quality-gate-passed=true" >> $GITHUB_OUTPUT
        else
          echo "🚫 **Quality Gate: FAILED**" >> $GITHUB_STEP_SUMMARY
          echo "quality-gate-passed=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Post comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync(process.env.GITHUB_STEP_SUMMARY, 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });