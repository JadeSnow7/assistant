# AI Assistant 开发环境Docker Compose配置
# 用于本地开发，包含热重载和调试功能

version: '3.8'

services:
  # AI Assistant开发服务
  ai-assistant-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      args:
        - USER_ID=${USER_ID:-1000}
        - GROUP_ID=${GROUP_ID:-1000}
    image: ai-assistant:dev
    container_name: ai-assistant-dev
    ports:
      - "8000:8000"   # API服务端口
      - "50051:50051" # gRPC服务端口
      - "5678:5678"   # Python调试端口
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - GRPC_PORT=50051
      - LOG_LEVEL=DEBUG
      - DEBUG=true
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    volumes:
      - .:/app                     # 源代码挂载(热重载)
      - dev-data:/app/data         # 开发数据
      - dev-logs:/app/logs         # 开发日志
      - /app/venv                  # 排除虚拟环境
      - /app/__pycache__           # 排除缓存
      - /app/.git                  # 排除git目录
    depends_on:
      - redis-dev
    networks:
      - ai-assistant-dev-network
    restart: unless-stopped
    stdin_open: true
    tty: true
    command: ["server"]

  # Redis开发环境
  redis-dev:
    image: redis:7-alpine
    container_name: ai-assistant-redis-dev
    ports:
      - "6380:6379"  # 避免与生产Redis冲突
    volumes:
      - redis-dev-data:/data
    networks:
      - ai-assistant-dev-network
    restart: unless-stopped

  # 测试数据库
  postgres-test:
    image: postgres:15-alpine
    container_name: ai-assistant-postgres-test
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=ai_assistant_test
      - POSTGRES_USER=test_user
      - POSTGRES_PASSWORD=test_password
    volumes:
      - postgres-test-data:/var/lib/postgresql/data
    networks:
      - ai-assistant-dev-network
    restart: unless-stopped

  # 开发工具容器
  dev-tools:
    build:
      context: .
      dockerfile: Dockerfile.dev-tools
    image: ai-assistant:dev-tools
    container_name: ai-assistant-dev-tools
    volumes:
      - .:/workspace
    working_dir: /workspace
    networks:
      - ai-assistant-dev-network
    profiles:
      - tools
    command: ["sleep", "infinity"]

  # 测试运行器
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.dev
    image: ai-assistant:dev
    container_name: ai-assistant-test-runner
    volumes:
      - .:/app
      - test-reports:/app/test_reports
    environment:
      - PYTHONPATH=/app
      - TEST_MODE=true
    networks:
      - ai-assistant-dev-network
    profiles:
      - test
    command: ["python", "tests/cli/run_cli_tests.py", "--no-health-check"]

  # 代码质量检查
  code-quality:
    build:
      context: .
      dockerfile: Dockerfile.dev-tools
    image: ai-assistant:dev-tools
    container_name: ai-assistant-code-quality
    volumes:
      - .:/workspace
    working_dir: /workspace
    networks:
      - ai-assistant-dev-network
    profiles:
      - quality
    command: |
      sh -c "
        echo '🔍 Running code quality checks...'
        black --check python/ ui/ &&
        isort --check-only python/ ui/ &&
        flake8 python/ ui/ --max-line-length=120 &&
        mypy python/ --ignore-missing-imports &&
        echo '✅ All code quality checks passed!'
      "

networks:
  ai-assistant-dev-network:
    driver: bridge

volumes:
  dev-data:
    driver: local
  dev-logs:
    driver: local
  redis-dev-data:
    driver: local
  postgres-test-data:
    driver: local
  test-reports:
    driver: local